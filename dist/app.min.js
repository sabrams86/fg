'use strict';

var app = angular.module('friendlyGear', ['ngRoute', 'ngCookies', 'jkuri.bookingcalendar']);

app.config(['$routeProvider', '$locationProvider', '$httpProvider', function ($routeProvider, $locationProvider, $httpProvider) {

  $routeProvider.when('/', { templateUrl: '/partials/splash.html', controller: 'SplashController' }).when('/home', { templateUrl: '/partials/home.html', controller: 'HomeController' }).when('/signup', { templateUrl: '/partials/users/new.html', controller: 'SignUpController' }).when('/users/:id', { templateUrl: '/partials/users/show.html', controller: 'UsersController' }).when('/users/:id/edit', { templateUrl: '/partials/users/edit.html', controller: 'UsersController' }).when('/items/new', { templateUrl: '/partials/items/new.html', controller: 'ItemsController' }).when('/items/:id', { templateUrl: '/partials/items/show.html', controller: 'ShowItemController' }).when('/items/:id/edit', { templateUrl: '/partials/items/edit.html', controller: 'EditItemController' }).when('/items/:itemId/contracts/new', { templateUrl: '/partials/contracts/new.html', controller: 'ContractsController' }).when('/items/:itemId/contracts/:id', { templateUrl: '/partials/contracts/show.html', controller: 'ShowContractsController' }).when('/items/:itemId/contracts/edit', { templateUrl: '/partials/contracts/edit.html', controller: 'ContractsController' }).when('/admin/categories', { templateUrl: '/partials/categories/index.html', controller: 'CategoriesController' }).otherwise({ redirectTo: '/' });

  $httpProvider.defaults.withCredentials = true;
  $locationProvider.html5Mode(true);
}]);

app.controller('CategoriesController', ['$scope', '$location', 'CategoryService', function ($scope, $location, CategoryService) {
  CategoryService.getCategories().then(function (results) {
    $scope.categories = results;
  });
  $scope.createCategory = function () {
    $scope.categoryData = {
      category: {
        name: $scope.name,
        parent: $scope.parent
      }
    };
    CategoryService.createCategory(this.categoryData).then(function (result) {
      $scope.categories.push(result);
      $scope.name = '';
      $scope.parent = '';
    });
  };
  $scope.deleteCategory = function (category) {
    CategoryService.deleteCategory(category._id).then(function () {
      $scope.categories.splice(category, 1);
    });
  };
}]);

app.controller('HomeController', ['$scope', '$location', '$cookies', 'ItemService', 'CategoryService', function ($scope, $location, $cookies, ItemService, CategoryService) {
  ItemService.getAllItems($location.url().split('?')[1]).then(function (results) {
    $scope.items = results;
  });
  CategoryService.getCategories().then(function (results) {
    $scope.categories = results;
  });
  $scope.newItem = function () {
    $location.path('/items/new');
  };
  $scope.filterCategory = function (category) {
    ItemService.getAllItems("?category=" + category.name).then(function (results) {
      $scope.items = results;
    });
  };
}]);

app.controller('ItemsController', ['$scope', '$cookies', '$location', 'ItemService', 'CategoryService', 'UserService', function ($scope, $cookies, $location, ItemService, CategoryService, UserService) {
  CategoryService.getCategories().then(function (results) {
    $scope.categories = results;
  });
  UserService.getUser($cookies.get('user')).then(function (result) {
    $scope.user = result;
  });
  $scope.newItem = function () {
    $location.path('/items/new');
  };
  $scope.createItem = function () {
    $scope.itemData = {
      'item': {
        'name': $scope.name,
        'brand': $scope.brand,
        'condition': $scope.condition,
        'datePurchased': $scope.datePurchased,
        'description': $scope.description,
        'imageUrl': $scope.imageUrl,
        'city': $scope.user.city,
        'state': $scope.user.state,
        'zip': $scope.user.zip,
        'price': $scope.price,
        'categories': $scope.categories,
        'userId': $cookies.get('user')
      }
    };
    ItemService.createItem(this.itemData).then(function (results) {
      $location.path('/items/' + results._id);
    });
  };
}]);

app.controller('MainController', ['$scope', '$location', '$cookies', 'UserService', 'AuthService', function ($scope, $location, $cookies, UserService, AuthService) {
  AuthService.checkLoggedIn().then(function (result) {
    $scope.userLoggedIn = true;
    $scope.currentUser = $cookies.get('user');
  }, function (result) {
    $scope.userLoggedIn = false;
  });
  $scope.logout = function () {
    $cookies.remove('user');
    $scope.userLoggedIn = false;
    $location.path('/');
  };
  $scope.login = function () {
    AuthService.login({ username: $scope.username, password: $scope.password }).then(function (result) {
      $scope.userLoggedIn = true;
    });
  };
  $scope.signUpPage = function () {
    $location.path('/signup');
  };
}]);

app.controller('SplashController', ['$scope', '$cookies', '$location', 'CategoryService', function ($scope, $cookies, $location, CategoryService) {
  CategoryService.getCategories().then(function (results) {
    $scope.categories = results;
  });
  $scope.search = function () {
    var startDate = new Date($("#startDate").val()).getTime();
    var endDate = new Date($("#endDate").val()).getTime();
    $location.url('/home?startDate=' + startDate + '&endDate=' + endDate + '&category=' + $('.text').html() + '&location=' + $scope.location);
  };
  $scope.signUp = function () {
    $location.path('/signup');
  };
}]);

app.directive("categoryDropdown", function () {
  return {
    link: function link(scope, elem, attrs) {
      angular.forEach(elem.find("#multi-select"), function (inputField) {
        $(inputField).dropdown();
      });
    },
    templateUrl: '/partials/templates/dropdown.html'
  };
});
app.directive("searchableCategoryDropdown", function () {
  return {
    link: function link(scope, elem, attrs) {
      angular.forEach(elem.find("#search-select"), function (inputField) {
        $(inputField).dropdown();
      });
    },
    templateUrl: '/partials/templates/search_dropdown.html'
  };
});

angular.module('jkuri.bookingcalendar', []).factory('MultiCalendarService', ['$http', function ($http) {
  var self = this;

  self.getData = function (url, id, from, to) {
    var params = {
      id: id,
      from: from,
      to: to
    };
    return $http.get(url, params);
  };

  return self;
}]).directive('fgBookingCalendar', ['$timeout', 'MultiCalendarService', function ($timeout, MultiCalendarService) {
  'use strict';

  var setScopeValues = function setScopeValues(scope, attrs) {
    scope.firstWeekDaySunday = scope.$eval(attrs.firstWeekDaySunday) || false;
    scope.locale = attrs.locale || 'en';
    scope.num = attrs.num || 3;
    scope.numMonthsText = attrs.numMonthsText || 'Number of months:';
    scope.id = attrs.id || null;
    scope.url = attrs.url || 'data/example_data.json';
  };

  return {
    restrict: 'EA',
    link: function link(scope, element, attrs) {
      setScopeValues(scope, attrs);

      scope.calendars = [];
      scope.dayNames = [];
      scope.displayMonthsOpts = [3, 6, 9, 12];
      scope.num = scope.displayMonthsOpts[scope.displayMonthsOpts.indexOf(parseInt(scope.num, 10))];

      moment.locale(scope.locale);
      var date = moment(),
          today = moment();

      var generateDayNames = function generateDayNames() {
        var date = scope.firstWeekDaySunday === true ? moment('2015-06-07') : moment('2015-06-01');
        for (var i = 0; i < 7; i += 1) {
          scope.dayNames.push(date.format('ddd'));
          date.add('1', 'd');
        }
      };

      generateDayNames();

      var generateCalendar = function generateCalendar(date, data) {
        var calendar = {},
            lastDayOfMonth = date.endOf('month').date(),
            month = date.month(),
            year = date.year(),
            n = 1,
            busy = false,
            past_day = false,
            is_today = false;

        var firstWeekDay = scope.firstWeekDaySunday === true ? date.set('date', 2).day() : date.set('date', 1).day();
        if (firstWeekDay !== 1) {
          n -= firstWeekDay - 1;
        }

        scope.dateValue = date.format('MMMM YYYY');
        calendar.days = [];

        for (var i = n; i <= lastDayOfMonth; i += 1) {
          busy = false;
          var cmpDate = moment(year + '-' + (month + 1) + '-' + i, 'YYYY-MM-DD'),
              cmpDateFormatted = cmpDate.format('YYYY-MM-DD');

          if (i > 0) {
            busy = calData[cmpDateFormatted] === false ? true : false;
            past_day = cmpDate < today ? true : false;
            is_today = cmpDateFormatted === today.format('YYYY-MM-DD') ? true : false;
            calendar.days.push({ day: i, month: month + 1, year: year, enabled: true, busy: busy, past_day: past_day, is_today: is_today });
          } else {
            calendar.days.push({ day: null, month: null, year: null, enabled: false, busy: busy });
          }
        }

        calendar.dateValue = date.format('MMMM YYYY');

        return calendar;
      };

      var calData = {};
      var initCalendars = function initCalendars(n) {
        scope.calendars = [];
        calData = {};
        scope.loading = true;

        var d = angular.copy(date),
            dateFrom = d.set('date', 1).format('YYYY-MM-DD'),
            dateTo = d.set('month', d.month() + scope.num - 1).set('date', d.endOf('month').date()).format('YYYY-MM-DD');

        MultiCalendarService.getData(scope.url, scope.id, dateFrom, dateTo).then(function (resp) {
          resp.data.reservedDates.forEach(function (d) {
            calData[d.date] = d.is_available;
          });

          for (var i = 0; i < n; i += 1) {
            scope.calendars.push(generateCalendar(date, calData));
            date.add('1', 'M');
          }

          scope.loading = false;
        });
      };

      scope.prevMonth = function () {
        var d = angular.copy(date);
        if (d.subtract(3, 'M').month() === today.month()) return;
        date.subtract(parseInt(scope.num, 10) + 1, 'M');
        initCalendars(scope.num);
      };

      scope.nextMonth = function () {
        date.subtract(parseInt(scope.num, 10) - 1, 'M');
        initCalendars(scope.num);
      };

      scope.$watch('num', function () {
        date = moment();
        initCalendars(parseInt(scope.num, 10));
      });
    },
    template: '<div class="ng-multi-calendar">' + '  <div class="ng-multi-calendar-select">' + '    <label>{{ numMonthsText }}' + '    <select ng-model="num" ng-options="n for n in displayMonthsOpts">' + '    </select>' + '    </label>' + '  </div>' + '  <div class="ng-multi-calendar-loader" ng-show="loading"><div class="uil-ring-css"><div></div></div></div>' + '  <div class="left">' + '    <i class="fa fa-angle-left" ng-click="prevMonth()"></i>' + '  </div>' + '  <div class="calendar" ng-repeat="c in calendars">' + '    <div class="month-name"><span ng-bind="c.dateValue" class="date"></span></div>' + '    <div class="day-names">' + '      <span ng-repeat="dn in dayNames">' + '        <span ng-bind="dn"></span>' + '      </span>' + '    </div>' + '    <div class="days">' + '      <span ng-repeat="d in c.days">' + '        <span class="day" ng-click="selectDate($event, d)" ng-class="{busy: d.busy, past: d.past_day, today: d.is_today}">{{ d.day }}</span>' + '      </span>' + '    </div>' + '  </div>' + '  <div class="right">' + '    <i class="fa fa-angle-right" ng-click="nextMonth()"></i>' + '  </div>' + '</div>'
  };
}]);

app.directive('userAuthDirective', function () {
  return {
    scope: {},
    controller: ['$scope', '$location', '$cookies', 'UserService', 'AuthService', function ($scope, $location, $cookies, UserService, AuthService) {
      AuthService.checkLoggedIn().then(function (result) {
        $scope.userLoggedIn = true;
        $scope.currentUser = $cookies.get('user');
      }, function (result) {
        $scope.userLoggedIn = false;
      });
      $scope.logout = function () {
        $cookies.remove('user');
        $scope.userLoggedIn = false;
        $location.path('/');
      };
      $scope.login = function () {
        AuthService.login({ username: $scope.username, password: $scope.password }).then(function (result) {
          $scope.userLoggedIn = true;
        });
      };
    }],
    templateUrl: '/partials/templates/userLogin.html'
  };
});

app.factory('AuthService', ['$http', '$cookies', '$q', function ($http, $cookies, $q) {
  var Auth = {};
  Auth.login = function (userInfo) {
    return $http.post('http://localhost:3000/login', userInfo).then(function (results) {
      $cookies.put('user', results.data._id);
      return true;
    });
  };
  Auth.logout = function () {
    $cookies.remove('user');
    return false;
  };
  Auth.checkLoggedIn = function () {
    var deferred = $q.defer();
    if ($cookies.get('user')) {
      deferred.resolve(true);
    } else {
      deferred.reject(false);
    }
    return deferred.promise;
  };
  return Auth;
}]);

app.factory('CategoryService', ['$http', '$cookies', function ($http, $cookies) {
  var CatService = {};

  CatService.getCategories = function () {
    return $http.get('http://localhost:3000/categories').then(function (results) {
      return results.data;
    });
  };

  CatService.createCategory = function (categoryData) {
    return $http.post('http://localhost:3000/categories', categoryData).then(function (result) {
      return result.data;
    });
  };

  CatService.deleteCategory = function (categoryId) {
    return $http.post('http://localhost:3000/categories/' + categoryId + '/delete').then(function (result) {
      return result.data;
    });
  };

  return CatService;
}]);

app.factory('ContractService', ['$http', '$cookies', '$q', function ($http, $cookies, $q) {
  var Service = {};

  Service.createContract = function (contractData) {
    return $http.post('http://localhost:3000/items/' + contractData.contract.itemId + '/contracts', contractData).then(function (result) {
      return result.data;
    });
  };
  Service.getContract = function (itemId, contractId) {
    return $http.get('http://localhost:3000/items/' + itemId + '/contracts/' + contractId).then(function (result) {
      return result.data;
    });
  };
  Service.deleteContract = function (itemId, contractId) {
    return $http.post('http://localhost:3000/items/' + itemId + '/contracts/' + contractId + '/delete').then(function (result) {
      return result.data;
    });
  };
  Service.updateContractStatus = function (itemId, contractId, status) {
    return $http.post('http://localhost:3000/items/' + itemId + '/contracts/' + contractId + '/' + status).then(function (result) {
      return result.data;
    });
  };
  Service.getUserContracts = function (userId, type) {
    return $http.get('http://localhost:3000/contracts/' + userId + '/' + type).then(function (results) {
      return results.data;
    });
  };
  return Service;
}]);

app.factory('ItemService', ['$http', '$cookies', function ($http, $cookies) {
  var Items = {};
  Items.getAllItems = function (query) {
    return $http.get('http://localhost:3000/items?' + query).then(function (results) {
      return results.data;
    });
  };
  Items.getItem = function (itemId) {
    return $http.get('http://localhost:3000/items/' + itemId).then(function (results) {
      return results.data;
    });
  };
  Items.createItem = function (itemData) {
    return $http.post('http://localhost:3000/items', itemData).then(function (result) {
      return result.data;
    });
  };
  Items.updateItem = function (itemData, itemId) {
    return $http.post('http://localhost:3000/items/' + itemId, itemData).then(function (result) {
      return result.data;
    });
  };
  Items.deleteItem = function (itemId) {
    return $http.post('http://localhost:3000/items/' + itemId + '/delete');
  };
  Items.getUserItems = function (userId) {
    return $http.get('http://localhost:3000/users/' + userId + '/user_items').then(function (results) {
      return results.data;
    });
  };
  Items.addReservation = function (itemId, reservation) {
    return $http.post('http://localhost:3000/items/' + itemId + '/reserve', reservation).then(function (result) {
      return result;
    });
  };
  Items.updateAvailibility = function (itemId, dates) {
    return $http.post('http://localhost:3000/items/' + itemId + '/unavailable', dates).then(function (result) {
      return result;
    });
  };
  return Items;
}]);

app.factory('MailService', ["$http", "$cookies", 'UserService', function ($http, $cookies, UserService) {
  var Mailer = {};

  Mailer.newContractMailer = function (contract) {
    var emailData = {
      renterEmailData: {
        subject: "You have a new FriendlyGear rental pending",
        text: "The owner of the item you have requested has been notified and you will recieve a confirmation when your rental request has been accepted"
      },
      ownerEmailData: {
        subject: "You have a new FriendlyGear rental request",
        text: "You have a new rental request.  Please log in to FriendlyGear to confirm or reject this rental."
      }
    };
    return UserService.getUser(contract.renterId).then(function (renter) {
      emailData.renterEmailData.email_from = renter.email;
      emailData.ownerEmailData.email_to = renter.email;
      return emailData;
    }).then(function (emailData) {
      return UserService.getUser(contract.ownerId).then(function (owner) {
        emailData.renterEmailData.email_to = owner.email;
        emailData.ownerEmailData.email_from = owner.email;
        return emailData;
      });
    }).then(function (emailData) {
      console.log(emailData);
      $http.post('http://localhost:3000/send', emailData.renterEmailData);
      $http.post('http://localhost:3000/send', emailData.ownerEmailData).then(function (status) {
        return status;
      }).then(function (emailData) {
        console.log(emailData);
      });
    });
  };

  return Mailer;
}]);

app.factory('PaymentService', ['$http', '$cookies', function ($http, $cookies) {
  var VenmoPayment = {};

  VenmoPayment.venmoLogin = function () {
    $location.path('https://api.venmo.com/v1/oauth/authorize?client_id=2988&scope=make_payments%20access_profile');
  };

  VenmoPayment.makePayment = function (payload) {
    return $http.post('http://localhost:3000/makePayment', payload).then(function (result) {
      console.log(result);
    });
  };

  return VenmoPayment;
}]);

app.factory('UserService', ['$http', '$cookies', '$rootScope', function ($http, $cookies, $rootScope) {
  var Users = {};

  Users.getUser = function (userId) {
    return $http.get('http://localhost:3000/users/' + userId).then(function (result) {
      return result.data;
    });
  };
  Users.signUpUser = function (userInfo) {
    return $http.post('http://localhost:3000/users', userInfo).then(function (results) {
      $cookies.put('user', results.data._id);
      $rootScope.userLoggedIn = true;
      return results.data;
    });
  };
  Users.updateUser = function (userInfo, userId) {
    return $http.post('http://localhost:3000/users/' + userId, userInfo).then(function (results) {
      console.log(results.data);
      return results.data;
    });
  };
  Users.deleteUser = function (userId) {
    return $http.post('http://localhost:3000/users/' + userId + '/delete').then(function (result) {
      return result.data;
    });
  };
  Users.login = function (userInfo) {
    return $http.post('http://localhost:3000/login', userInfo).then(function (results) {
      $cookies.put('user', results.data._id);
      $rootScope.userLoggedIn = true;
      return results.data;
    });
  };
  Users.logout = function () {
    $rootScope.userLoggedIn = false;
    $cookies.remove('user');
  };
  return Users;
}]);

app.controller('ContractsController', ['$scope', '$location', '$cookies', 'AuthService', 'ItemService', 'ContractService', 'MailService', function ($scope, $location, $cookies, AuthService, ItemService, ContractService, MailService) {
  if (!$scope.userLoggedIn) $location.path('/');
  ItemService.getItem($location.path().split('/')[2]).then(function (result) {
    $scope.item = result;
  });
  $scope.reservedDates = [];
  $scope.createContract = function () {
    var contractData = {
      contract: {
        itemId: $scope.item._id,
        ownerId: $scope.item.userId,
        renterId: $scope.currentUser,
        startDate: $scope.startDate,
        endDate: $scope.endDate,
        reservedDates: $scope.reservedDates,
        status: "Pending"
      }
    };
    ItemService.addReservation($scope.item._id, $scope.reservedDates).then(function (status) {
      if (status) {
        ContractService.createContract(contractData).then(function (result) {
          return result;
        }).then(function (result) {
          MailService.newContractMailer(result).then(function (result) {
            $location.path('/items/' + result.itemId + '/contracts/' + result._id);
          });
        });
      } else {
        alert("Some of those dates have already been reserved, please try a different range");
      }
    });
  };
  $scope.selectDate = function (a, day) {
    var stringDate = day.year + '-' + day.month + '-' + day.day;
    var selectedDate = { "date": stringDate, "is_available": false };
    $scope.reservedDates.push(selectedDate);
  };
}]);

app.controller('ShowContractsController', ['$scope', '$location', '$cookies', 'AuthService', 'ItemService', 'ContractService', 'PaymentService', function ($scope, $location, $cookies, AuthService, ItemService, ContractService, PaymentService) {
  if (!$scope.userLoggedIn) $location.path('/');
  ItemService.getItem($location.path().split('/')[2]).then(function (result) {
    $scope.item = result;
  });
  ContractService.getContract($location.path().split('/')[2], $location.path().split('/')[4]).then(function (result) {
    $scope.contract = result;
  });
  $scope.updateContract = function () {
    var contractData = {
      contract: {
        startDate: $scope.startDate,
        endDate: $scope.endDate,
        status: $scope.status
      }
    };
    ContractService.updateContract(contractData).then(function (result) {
      $location.path('/items/' + result.itemId + '/contracts/' + result._id);
    });
  };
  $scope.updateContractStatus = function (status) {
    ContractService.updateContractStatus($scope.item._id, $scope.contract._id, status).then(function (result) {
      $scope.contract.status = status;
    });
  };
  $scope.deleteContract = function () {
    ContractService.deleteContract($scope.item._id, $scope.contract._id).then(function (result) {
      console.log($scope.item._id);
      $location.path('/items/' + $scope.item._id);
    });
  };
  $scope.payUser = function () {
    var payload = {
      phone: 3035184125,
      amount: $scope.amount,
      note: $scope.note
    };
    PaymentService.makePayment(payload);
  };
}]);

app.controller('EditItemController', ['$scope', '$cookies', '$location', 'ItemService', function ($scope, $cookies, $location, ItemService) {
  ItemService.getItem($location.path().split('/')[2]).then(function (result) {
    $scope.item = result;
  });
  $scope.updateItem = function (itemId) {
    $scope.itemData = {
      'item': {
        'name': $scope.name,
        'brand': $scope.brand,
        'condition': $scope.condition,
        'description': $scope.description,
        'imageUrl': $scope.imageUrl,
        'price': $scope.price,
        'categories': $scope.categories
      }
    };
    ItemService.updateItem(this.itemData, itemId).then(function (results) {
      $location.path('/items/' + results._id);
    });
  };
}]);

app.controller('ShowItemController', ['$scope', '$cookies', '$location', '$route', 'ItemService', function ($scope, $cookies, $location, $route, ItemService) {
  ItemService.getItem($location.path().split('/')[2]).then(function (result) {
    $scope.item = result;
  });
  $scope.deleteItem = function (itemId) {
    ItemService.deleteItem(itemId).then(function () {
      $location.path('/home');
    });
  };
  $scope.editItem = function (itemId) {
    $location.path('/items/' + itemId + '/edit');
  };
  $scope.unAvailableDates = [];
  $scope.updateAvailibility = function () {
    ItemService.updateAvailibility($scope.item._id, $scope.unAvailableDates).then(function (status) {
      if (status) {
        console.log(status);
        $route.reload();
      } else {
        alert("Some of those dates have already been reserved, you may have to cancel some reservations");
      }
    });
  };
  $scope.selectDate = function (a, day) {
    var stringDate = day.year + '-' + day.month + '-' + day.day;
    var selectedDate = { "date": stringDate, "is_available": false };
    $scope.unAvailableDates.push(selectedDate);
  };
}]);

app.controller('SignUpController', ['$scope', '$cookies', '$location', 'UserService', function ($scope, $cookies, $location, UserService) {
  $scope.signUp = function () {
    $scope.user = {
      'user': {
        'username': $scope.username,
        'name': $scope.name,
        'email': $scope.email,
        'city': $scope.city,
        'state': $scope.state,
        'zip': $scope.zip,
        'phone': $scope.phone,
        'avatarUrl': $scope.avatarUrl,
        'password': $scope.password,
        'passwordconfirm': $scope.passwordconfirm
      }
    };
    UserService.signUpUser(this.user).then(function (result) {
      $location.path('/users/' + result._id);
    });
  };
}]);

app.controller('UsersController', ['$scope', '$location', '$cookies', 'UserService', 'ItemService', 'ContractService', function ($scope, $location, $cookies, UserService, ItemService, ContractService) {
  UserService.getUser($cookies.get('user')).then(function (user) {
    console.log(user);
    $scope.user = user;
    return user;
  }, function (err) {
    $location.path('/');
  }).then(function (userInfo) {
    return ItemService.getUserItems(userInfo._id).then(function (userItems) {
      $scope.userItems = userItems;
      return userInfo;
    });
  }).then(function (userInfo) {
    ContractService.getUserContracts(userInfo._id, 'owner').then(function (userOwnerContracts) {
      $scope.ownerContracts = userOwnerContracts;
    });
    return userInfo;
  }).then(function (userInfo) {
    ContractService.getUserContracts(userInfo._id, 'renter').then(function (userRenterContracts) {
      $scope.renterContracts = userRenterContracts;
    });
  });

  $scope.updateUser = function () {
    $scope.userData = {
      'user': {
        '_id': $cookies.get('user'),
        'name': $scope.name,
        'email': $scope.email,
        'city': $scope.city,
        'state': $scope.state,
        'zip': $scope.zip,
        'phone': $scope.phone,
        'avatarUrl': $scope.avatarUrl,
        'password': $scope.password
      }
    };
    UserService.updateUser(this.userData, $cookies.get('user')).then(function (result) {
      $location.path('/users/' + result._id);
    });
  };
  $scope.deleteUser = function (userId) {
    UserService.deleteUser(userId).then(function (response) {
      $cookies.remove('user');
      $scope.userLoggedIn = false;
      $location.path('/');
    });
  };
  $scope.deleteItem = function (item) {
    ItemService.deleteItem(item._id).then(function () {
      $scope.userItems.splice(item);
    });
  };
}]);